name: Deploy

on:
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
    steps:
      - name: '‚òÅÔ∏è checkout repository'
        uses: actions/checkout@v3

      - name: 'üîß setup node'
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: 'üì¶ install dependencies'
        uses: bahmutov/npm-install@v1

      - name: 'üì¶ build project'
        run: npm run build
      
      - name: 'üîß setup prisma - generate'
        working-directory: ./packages/infrastructure/repositories
        run: npx prisma generate
      
      # - name: 'üì¶ remove dev dependencies'
      #   run: 'npm prune --production'

      - name: 'üì¶ install serverless'
        run: npm i -g serverless

      - name: 'üîß setup serverless'
        run: serverless config credentials --provider aws --key ${{ secrets.AWS_ACCESS_KEY_ID }} --secret ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: 'üîß copy files for serverless deploy'
        run: cp -r packages/infrastructure/repositories/prisma serverless/dbmigration/prisma

      - name: '‚òÅÔ∏è serverless deploy'
        run: serverless deploy
      
      - name: 'üîß get db migration lambda name'
        run: echo "DB_MIGRATION_FUNC_NAME=$(serverless print --path functions.DBMigration.name --format text)" >> $GITHUB_ENV
      
      - name: '‚òÅÔ∏è call db migration lambda - 1st time (db probably cold)'
        id: db-migrate-1
        uses: gagoar/invoke-aws-lambda@v3.3.1
        with:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          FunctionName: ${{ env.DB_MIGRATION_FUNC_NAME }}
        continue-on-error: true
        
      - name: 'üîß print db migration lambda call response'
        run: echo '${{ fromJSON(steps.db-migrate-1.outputs.response).Payload }}'
      
      - name: '... sleep for a bit to let the database wake up ...'
        run: sleep 30s
        shell: bash
      
      - name: '‚òÅÔ∏è call db migration lambda - 2nd time'
        id: db-migrate-2
        uses: gagoar/invoke-aws-lambda@v3.3.1
        with:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          FunctionName: ${{ env.DB_MIGRATION_FUNC_NAME }}
        
      - name: 'üîß print db migration lambda call response'
        run: echo '${{ fromJSON(steps.db-migrate-2.outputs.response).Payload }}'
        if: steps.db-migrate-2.outputs.status == 'failure'

      # - name: 'üîß migrate database'
      #   run: serverless invoke --function DBMigration

      # - name: '... sleep for a few minutes to let the database wake up ...'
      #   run: sleep 60s
      #   shell: bash
      #   if: success() || failure()

      # - name: 'üîß migrate database'
      #   run: serverless invoke --function DBMigration
      #   if: success() || failure()
