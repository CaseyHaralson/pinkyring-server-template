service: pinkyring

provider:
  name: aws
  region: us-east-1
  stage: test
  stackName: ${self:provider.stage}-${self:service}
  timeout: 29
  vpc:
    securityGroupIds:
      - !Ref PublicSecurityGroup
    subnetIds:
      - !Ref SubnetAPublic
      - !Ref SubnetBPublic
  environment:
    NODE_ENV: ${self:provider.stage}
    MYSQL_DATABASE_URL:
      Fn::Join:
        - ''
        - - 'mysql://'
          - ${self:custom.DB_USERNAME}
          - ':'
          - ${self:custom.DB_PASSWORD}
          - '@'
          - Fn::GetAtt: [AuroraDBCluster, Endpoint.Address]
          - ':3306/'
          - ${self:custom.DB_DATABASE_NAME}
          - '?connection_limit=1'
          - '&pool_timeout=30'
    BLOGPOST_ADDED_TOPIC_ARN: !Ref BlogPostAddedTopic
    MANUAL_PULL_QUEUE_URL: !Ref ManualPullQueue
    IDEMPOTENT_REQUESTS_CLEAN_OLDERTHAN_HOURS: '24'
    IDEMPOTENT_REQUESTS_TIMEDOUT_SECONDS: '40'
  ecr:
    images:
      db-migration-runner:
        # this relies on the prisma folder existing in the same directory
        # the github deploy action includes a step that handles copying the prisma folder
        path: ./serverless/dbmigration/
  iam:
    role:
      statements:
        - Effect: Allow
          Action: SNS:Publish
          Resource: '*'
        - Effect: Allow
          Action: sqs:ReceiveMessage
          Resource: '*'
        - Effect: Allow
          Action: sqs:GetQueueAttributes
          Resource: '*'

custom:
  # the following should come from a secrets store
  # also, these will show up in the environment variables for the lambda
  # so make sure whoever can view the lambda config should be able to see this data
  # ================================
  DB_USERNAME: root
  DB_PASSWORD: example!
  # ================================
  DB_DATABASE_NAME: pinkyring
  DB_AUTOPAUSE: true
  DB_CAPACITY_MIN: 1
  DB_CAPACITY_MAX: 1
  DBClusterARN:
    Fn::Join:
      - ':'
      - - 'arn:aws:rds'
        - Ref: 'AWS::Region'
        - Ref: 'AWS::AccountId'
        - 'cluster'
        - !Ref AuroraDBCluster
  
  graphql:
    handler: ./packages/infrastructure/aws/lambdas/build/graphql/server.graphqlHandler
    events:
      - httpApi:
          path: /graphql
          method: GET
      - httpApi:
          path: /graphql
          method: POST
  
  DBMigration:
    image:
      name: db-migration-runner
  
  blogPostAddedEvent:
    handler: ./packages/infrastructure/aws/lambdas/build/events/blogPostAdded.handler
    events:
      - sqs: 
          arn: 
            Fn::GetAtt: [BlogPostAddedQueue, Arn]
  
  createBlogPostEvent:
    handler: ./packages/infrastructure/aws/lambdas/build/events/createBlogPostEvent.handler
    events:
      - httpApi:
          path: /events/createBlogPostEvent
          method: GET
  
  getOneEventEvent:
    handler: ./packages/infrastructure/aws/lambdas/build/events/getOneEvent.handler
    events:
      - httpApi:
          path: /events/getOneEventEvent
          method: GET

resources:
  - ${file(serverless/resources/vpc.yml)}
  - ${file(serverless/resources/rds.yml)}
  - ${file(serverless/resources/queue.yml)}

package:
  patterns:
    - '!node_modules/.prisma/client/libquery_engine-*'
    - 'node_modules/.prisma/client/libquery_engine-rhel-*'
    - '!node_modules/prisma/libquery_engine-*'
    - '!node_modules/@prisma/engines/**'
    - '!.github'
    - '!docker'
    - '!serverless'
    - '!packages/**'
    - 'packages/**/build/**/*.js'
    - '!package-lock.json'
