// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("MYSQL_DATABASE_URL")
}

// npm run prisma generate        (generates the javascript types)
// npm run prisma studio          (website to view the data)
// npm run prisma migrate dev     (generate migration file that you might have to modify to keep data intact)
// npm run prisma migrate dev -- --create-only   (creates the migration but doesn't apply it, so it can be edited) 
//                                        (run "npx prisma migrate dev" to apply edited migration)
//                                        (might need to run migrate reset if you have been using db push for prototyping)
// npm run prisma db push         (can delete current data to update database) (fast for prototyping)
// npm run prisma db push -- --force-reset   (clears the database)
// npm run prisma migrate reset   (drops and recreates the database, runs migrations, then seeds the database)
// npm run prisma migrate deploy  (runs migrations against the environment)
// npm run prisma db seed         (seed the database with the file selected in the package.json file -> prisma.seed section)

model BlogPost {
  id String @id @default(cuid())
  title String
  text String @db.Text
  createdAt DateTime  @default(now())
  updatedAt DateTime @updatedAt

  authorId String
  author Author @relation(fields: [authorId], references: [id])

  @@unique([authorId, title])
  @@fulltext([text])
}

model Author {
  id String @id @default(cuid())
  name String @unique

  blogPosts BlogPost[]
}

model IdempotentRequest {
  id String @unique
  createdAt DateTime @default(now())
  result String? @db.Text
}